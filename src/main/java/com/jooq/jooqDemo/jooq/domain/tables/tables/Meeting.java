/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.MeetingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Meeting extends TableImpl<MeetingRecord> {

    private static final long serialVersionUID = -1122519613;

    /**
     * The reference instance of <code>raadsmarine.MEETING</code>
     */
    public static final Meeting MEETING = new Meeting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeetingRecord> getRecordType() {
        return MeetingRecord.class;
    }

    /**
     * The column <code>raadsmarine.MEETING.MEETING_ID</code>.
     */
    public final TableField<MeetingRecord, Long> MEETING_ID = createField("MEETING_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raadsmarine.MEETING.CREATED_BY</code>.
     */
    public final TableField<MeetingRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.MEETING.CREATED_DATE</code>.
     */
    public final TableField<MeetingRecord, Timestamp> CREATED_DATE = createField("CREATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>raadsmarine.MEETING.MEETING_AGENDA</code>.
     */
    public final TableField<MeetingRecord, String> MEETING_AGENDA = createField("MEETING_AGENDA", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.MEETING.meetingDate</code>.
     */
    public final TableField<MeetingRecord, Timestamp> MEETINGDATE = createField("meetingDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>raadsmarine.MEETING.TO_USERS</code>.
     */
    public final TableField<MeetingRecord, String> TO_USERS = createField("TO_USERS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.MEETING.UPDATED_BY</code>.
     */
    public final TableField<MeetingRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.MEETING.UPDATED_DATE</code>.
     */
    public final TableField<MeetingRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>raadsmarine.MEETING.fromUser_UserId</code>.
     */
    public final TableField<MeetingRecord, Long> FROMUSER_USERID = createField("fromUser_UserId", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>raadsmarine.MEETING</code> table reference
     */
    public Meeting() {
        this(DSL.name("MEETING"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.MEETING</code> table reference
     */
    public Meeting(String alias) {
        this(DSL.name(alias), MEETING);
    }

    /**
     * Create an aliased <code>raadsmarine.MEETING</code> table reference
     */
    public Meeting(Name alias) {
        this(alias, MEETING);
    }

    private Meeting(Name alias, Table<MeetingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Meeting(Name alias, Table<MeetingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEETING_FK_IRTN2CBI2KCEIHJDULKAYFG1E, Indexes.MEETING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MeetingRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEETING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MeetingRecord> getPrimaryKey() {
        return Keys.KEY_MEETING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MeetingRecord>> getKeys() {
        return Arrays.<UniqueKey<MeetingRecord>>asList(Keys.KEY_MEETING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MeetingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MeetingRecord, ?>>asList(Keys.FK_IRTN2CBI2KCEIHJDULKAYFG1E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Meeting as(String alias) {
        return new Meeting(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Meeting as(Name alias) {
        return new Meeting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Meeting rename(String name) {
        return new Meeting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Meeting rename(Name name) {
        return new Meeting(name, null);
    }
}
