/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.RoleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Role extends TableImpl<RoleRecord> {

    private static final long serialVersionUID = 107322040;

    /**
     * The reference instance of <code>raadsmarine.Role</code>
     */
    public static final Role ROLE = new Role();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoleRecord> getRecordType() {
        return RoleRecord.class;
    }

    /**
     * The column <code>raadsmarine.Role.RoleId</code>.
     */
    public final TableField<RoleRecord, Long> ROLEID = createField("RoleId", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raadsmarine.Role.created_by</code>.
     */
    public final TableField<RoleRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Role.CreatedDate</code>.
     */
    public final TableField<RoleRecord, Timestamp> CREATEDDATE = createField("CreatedDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>raadsmarine.Role.Enabled</code>.
     */
    public final TableField<RoleRecord, Boolean> ENABLED = createField("Enabled", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>raadsmarine.Role.RoleDesc</code>.
     */
    public final TableField<RoleRecord, String> ROLEDESC = createField("RoleDesc", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Role.RoleName</code>.
     */
    public final TableField<RoleRecord, String> ROLENAME = createField("RoleName", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Role.UpdatedBy</code>.
     */
    public final TableField<RoleRecord, String> UPDATEDBY = createField("UpdatedBy", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Role.UpdatedDate</code>.
     */
    public final TableField<RoleRecord, Timestamp> UPDATEDDATE = createField("UpdatedDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>raadsmarine.Role</code> table reference
     */
    public Role() {
        this(DSL.name("Role"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.Role</code> table reference
     */
    public Role(String alias) {
        this(DSL.name(alias), ROLE);
    }

    /**
     * Create an aliased <code>raadsmarine.Role</code> table reference
     */
    public Role(Name alias) {
        this(alias, ROLE);
    }

    private Role(Name alias, Table<RoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RoleRecord, Long> getIdentity() {
        return Keys.IDENTITY_ROLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoleRecord> getPrimaryKey() {
        return Keys.KEY_ROLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoleRecord>> getKeys() {
        return Arrays.<UniqueKey<RoleRecord>>asList(Keys.KEY_ROLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Role as(String alias) {
        return new Role(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Role as(Name alias) {
        return new Role(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(String name) {
        return new Role(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Role rename(Name name) {
        return new Role(name, null);
    }
}
