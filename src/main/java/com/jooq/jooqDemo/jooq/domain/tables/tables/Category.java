/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.CategoryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Category extends TableImpl<CategoryRecord> {

    private static final long serialVersionUID = 2067665671;

    /**
     * The reference instance of <code>raadsmarine.Category</code>
     */
    public static final Category CATEGORY = new Category();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryRecord> getRecordType() {
        return CategoryRecord.class;
    }

    /**
     * The column <code>raadsmarine.Category.CATEGORY_ID</code>.
     */
    public final TableField<CategoryRecord, Long> CATEGORY_ID = createField("CATEGORY_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raadsmarine.Category.CATEGORY_DESCRIPTION</code>.
     */
    public final TableField<CategoryRecord, String> CATEGORY_DESCRIPTION = createField("CATEGORY_DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(10000), this, "");

    /**
     * The column <code>raadsmarine.Category.CATEGORY_IMAGE_URL</code>.
     */
    public final TableField<CategoryRecord, String> CATEGORY_IMAGE_URL = createField("CATEGORY_IMAGE_URL", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Category.CATEGORY_NAME</code>.
     */
    public final TableField<CategoryRecord, String> CATEGORY_NAME = createField("CATEGORY_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Category.CATEGORY_TYPE</code>.
     */
    public final TableField<CategoryRecord, String> CATEGORY_TYPE = createField("CATEGORY_TYPE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Category.parentCategory_CATEGORY_ID</code>.
     */
    public final TableField<CategoryRecord, Long> PARENTCATEGORY_CATEGORY_ID = createField("parentCategory_CATEGORY_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>raadsmarine.Category</code> table reference
     */
    public Category() {
        this(DSL.name("Category"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.Category</code> table reference
     */
    public Category(String alias) {
        this(DSL.name(alias), CATEGORY);
    }

    /**
     * Create an aliased <code>raadsmarine.Category</code> table reference
     */
    public Category(Name alias) {
        this(alias, CATEGORY);
    }

    private Category(Name alias, Table<CategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Category(Name alias, Table<CategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CATEGORY_FK_7SCUX04NKPOUXDY2I6H8UPDIO, Indexes.CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CategoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_CATEGORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CategoryRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<CategoryRecord>>asList(Keys.KEY_CATEGORY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CategoryRecord, ?>>asList(Keys.FK_7SCUX04NKPOUXDY2I6H8UPDIO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Category as(String alias) {
        return new Category(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Category as(Name alias) {
        return new Category(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Category rename(String name) {
        return new Category(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Category rename(Name name) {
        return new Category(name, null);
    }
}
