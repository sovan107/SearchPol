/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.ProductdummyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Productdummy extends TableImpl<ProductdummyRecord> {

    private static final long serialVersionUID = -1867776229;

    /**
     * The reference instance of <code>raadsmarine.ProductDummy</code>
     */
    public static final Productdummy PRODUCTDUMMY = new Productdummy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductdummyRecord> getRecordType() {
        return ProductdummyRecord.class;
    }

    /**
     * The column <code>raadsmarine.ProductDummy.id</code>.
     */
    public final TableField<ProductdummyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>raadsmarine.ProductDummy.name</code>.
     */
    public final TableField<ProductdummyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>raadsmarine.ProductDummy</code> table reference
     */
    public Productdummy() {
        this(DSL.name("ProductDummy"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.ProductDummy</code> table reference
     */
    public Productdummy(String alias) {
        this(DSL.name(alias), PRODUCTDUMMY);
    }

    /**
     * Create an aliased <code>raadsmarine.ProductDummy</code> table reference
     */
    public Productdummy(Name alias) {
        this(alias, PRODUCTDUMMY);
    }

    private Productdummy(Name alias, Table<ProductdummyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Productdummy(Name alias, Table<ProductdummyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCTDUMMY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductdummyRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTDUMMY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductdummyRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductdummyRecord>>asList(Keys.KEY_PRODUCTDUMMY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Productdummy as(String alias) {
        return new Productdummy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Productdummy as(Name alias) {
        return new Productdummy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Productdummy rename(String name) {
        return new Productdummy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productdummy rename(Name name) {
        return new Productdummy(name, null);
    }
}
