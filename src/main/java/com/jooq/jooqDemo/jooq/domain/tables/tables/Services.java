/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.ServicesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Services extends TableImpl<ServicesRecord> {

    private static final long serialVersionUID = -1698042170;

    /**
     * The reference instance of <code>raadsmarine.Services</code>
     */
    public static final Services SERVICES = new Services();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServicesRecord> getRecordType() {
        return ServicesRecord.class;
    }

    /**
     * The column <code>raadsmarine.Services.SERVICE_ID</code>.
     */
    public final TableField<ServicesRecord, Long> SERVICE_ID = createField("SERVICE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raadsmarine.Services.SERVICE_DESCRIPTION</code>.
     */
    public final TableField<ServicesRecord, String> SERVICE_DESCRIPTION = createField("SERVICE_DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(10000), this, "");

    /**
     * The column <code>raadsmarine.Services.SERVICE_IMAGE_URL</code>.
     */
    public final TableField<ServicesRecord, String> SERVICE_IMAGE_URL = createField("SERVICE_IMAGE_URL", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Services.SERVICE_NAME</code>.
     */
    public final TableField<ServicesRecord, String> SERVICE_NAME = createField("SERVICE_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.Services.parentService_SERVICE_ID</code>.
     */
    public final TableField<ServicesRecord, Long> PARENTSERVICE_SERVICE_ID = createField("parentService_SERVICE_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>raadsmarine.Services</code> table reference
     */
    public Services() {
        this(DSL.name("Services"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.Services</code> table reference
     */
    public Services(String alias) {
        this(DSL.name(alias), SERVICES);
    }

    /**
     * Create an aliased <code>raadsmarine.Services</code> table reference
     */
    public Services(Name alias) {
        this(alias, SERVICES);
    }

    private Services(Name alias, Table<ServicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Services(Name alias, Table<ServicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVICES_FK_4SHYWPEQG0SXKMKWKA7QLX8LU, Indexes.SERVICES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ServicesRecord, Long> getIdentity() {
        return Keys.IDENTITY_SERVICES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServicesRecord> getPrimaryKey() {
        return Keys.KEY_SERVICES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServicesRecord>> getKeys() {
        return Arrays.<UniqueKey<ServicesRecord>>asList(Keys.KEY_SERVICES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ServicesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServicesRecord, ?>>asList(Keys.FK_4SHYWPEQG0SXKMKWKA7QLX8LU);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Services as(String alias) {
        return new Services(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Services as(Name alias) {
        return new Services(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(String name) {
        return new Services(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(Name name) {
        return new Services(name, null);
    }
}
