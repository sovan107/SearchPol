/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.ChildLookupRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChildLookup extends TableImpl<ChildLookupRecord> {

    private static final long serialVersionUID = 1036173011;

    /**
     * The reference instance of <code>raadsmarine.CHILD_LOOKUP</code>
     */
    public static final ChildLookup CHILD_LOOKUP = new ChildLookup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChildLookupRecord> getRecordType() {
        return ChildLookupRecord.class;
    }

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.CHILD_LOOKUP_ID</code>.
     */
    public final TableField<ChildLookupRecord, Long> CHILD_LOOKUP_ID = createField("CHILD_LOOKUP_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.CREATED_BY</code>.
     */
    public final TableField<ChildLookupRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.CREATED_DATE</code>.
     */
    public final TableField<ChildLookupRecord, Date> CREATED_DATE = createField("CREATED_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.DESCRIPTION</code>.
     */
    public final TableField<ChildLookupRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.IS_ACTIVE</code>.
     */
    public final TableField<ChildLookupRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.NON_NUMERIC_VALUE</code>.
     */
    public final TableField<ChildLookupRecord, String> NON_NUMERIC_VALUE = createField("NON_NUMERIC_VALUE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.NUMERIC_VALUE</code>.
     */
    public final TableField<ChildLookupRecord, BigDecimal> NUMERIC_VALUE = createField("NUMERIC_VALUE", org.jooq.impl.SQLDataType.DECIMAL(19, 2), this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.UPDATED_BY</code>.
     */
    public final TableField<ChildLookupRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.UPDATED_DATE</code>.
     */
    public final TableField<ChildLookupRecord, Date> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>raadsmarine.CHILD_LOOKUP.parentLookup_PARENT_LOOKUP_ID</code>.
     */
    public final TableField<ChildLookupRecord, Long> PARENTLOOKUP_PARENT_LOOKUP_ID = createField("parentLookup_PARENT_LOOKUP_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>raadsmarine.CHILD_LOOKUP</code> table reference
     */
    public ChildLookup() {
        this(DSL.name("CHILD_LOOKUP"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.CHILD_LOOKUP</code> table reference
     */
    public ChildLookup(String alias) {
        this(DSL.name(alias), CHILD_LOOKUP);
    }

    /**
     * Create an aliased <code>raadsmarine.CHILD_LOOKUP</code> table reference
     */
    public ChildLookup(Name alias) {
        this(alias, CHILD_LOOKUP);
    }

    private ChildLookup(Name alias, Table<ChildLookupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ChildLookup(Name alias, Table<ChildLookupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHILD_LOOKUP_FK_D84B13YB1CC24J219UVS58SRG, Indexes.CHILD_LOOKUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ChildLookupRecord, Long> getIdentity() {
        return Keys.IDENTITY_CHILD_LOOKUP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ChildLookupRecord> getPrimaryKey() {
        return Keys.KEY_CHILD_LOOKUP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ChildLookupRecord>> getKeys() {
        return Arrays.<UniqueKey<ChildLookupRecord>>asList(Keys.KEY_CHILD_LOOKUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ChildLookupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChildLookupRecord, ?>>asList(Keys.FK_D84B13YB1CC24J219UVS58SRG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChildLookup as(String alias) {
        return new ChildLookup(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ChildLookup as(Name alias) {
        return new ChildLookup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChildLookup rename(String name) {
        return new ChildLookup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChildLookup rename(Name name) {
        return new ChildLookup(name, null);
    }
}
