/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.NoticeRoleRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoticeRole extends TableImpl<NoticeRoleRecord> {

    private static final long serialVersionUID = 207129416;

    /**
     * The reference instance of <code>raadsmarine.NOTICE_Role</code>
     */
    public static final NoticeRole NOTICE_ROLE = new NoticeRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticeRoleRecord> getRecordType() {
        return NoticeRoleRecord.class;
    }

    /**
     * The column <code>raadsmarine.NOTICE_Role.NOTICE_NOTICE_ID</code>.
     */
    public final TableField<NoticeRoleRecord, Long> NOTICE_NOTICE_ID = createField("NOTICE_NOTICE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>raadsmarine.NOTICE_Role.targetRoles_RoleId</code>.
     */
    public final TableField<NoticeRoleRecord, Long> TARGETROLES_ROLEID = createField("targetRoles_RoleId", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>raadsmarine.NOTICE_Role</code> table reference
     */
    public NoticeRole() {
        this(DSL.name("NOTICE_Role"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.NOTICE_Role</code> table reference
     */
    public NoticeRole(String alias) {
        this(DSL.name(alias), NOTICE_ROLE);
    }

    /**
     * Create an aliased <code>raadsmarine.NOTICE_Role</code> table reference
     */
    public NoticeRole(Name alias) {
        this(alias, NOTICE_ROLE);
    }

    private NoticeRole(Name alias, Table<NoticeRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private NoticeRole(Name alias, Table<NoticeRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOTICE_ROLE_FK_T1YBVV6RRFDI74UNV22YK51S7, Indexes.NOTICE_ROLE_UK_3H4G8J3CTYHYUGHB26TYHJUT3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NoticeRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<NoticeRoleRecord>>asList(Keys.KEY_NOTICE_ROLE_UK_3H4G8J3CTYHYUGHB26TYHJUT3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<NoticeRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NoticeRoleRecord, ?>>asList(Keys.FK_T1YBVV6RRFDI74UNV22YK51S7, Keys.FK_3H4G8J3CTYHYUGHB26TYHJUT3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoticeRole as(String alias) {
        return new NoticeRole(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NoticeRole as(Name alias) {
        return new NoticeRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NoticeRole rename(String name) {
        return new NoticeRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NoticeRole rename(Name name) {
        return new NoticeRole(name, null);
    }
}
