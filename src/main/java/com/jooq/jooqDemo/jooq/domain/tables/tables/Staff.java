/*
 * This file is generated by jOOQ.
*/
package com.jooq.jooqDemo.jooq.domain.tables.tables;


import com.jooq.jooqDemo.jooq.domain.tables.Indexes;
import com.jooq.jooqDemo.jooq.domain.tables.Keys;
import com.jooq.jooqDemo.jooq.domain.tables.Raadsmarine;
import com.jooq.jooqDemo.jooq.domain.tables.tables.records.StaffRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staff extends TableImpl<StaffRecord> {

    private static final long serialVersionUID = -274613550;

    /**
     * The reference instance of <code>raadsmarine.STAFF</code>
     */
    public static final Staff STAFF = new Staff();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffRecord> getRecordType() {
        return StaffRecord.class;
    }

    /**
     * The column <code>raadsmarine.STAFF.PERSON_ID</code>.
     */
    public final TableField<StaffRecord, Long> PERSON_ID = createField("PERSON_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raadsmarine.STAFF.ADDRESS</code>.
     */
    public final TableField<StaffRecord, String> ADDRESS = createField("ADDRESS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.AREA</code>.
     */
    public final TableField<StaffRecord, Integer> AREA = createField("AREA", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>raadsmarine.STAFF.CITY</code>.
     */
    public final TableField<StaffRecord, Integer> CITY = createField("CITY", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>raadsmarine.STAFF.COUNTRY</code>.
     */
    public final TableField<StaffRecord, String> COUNTRY = createField("COUNTRY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.CREATED_BY</code>.
     */
    public final TableField<StaffRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.CREATED_DATE</code>.
     */
    public final TableField<StaffRecord, Timestamp> CREATED_DATE = createField("CREATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>raadsmarine.STAFF.DISTRICT</code>.
     */
    public final TableField<StaffRecord, Integer> DISTRICT = createField("DISTRICT", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>raadsmarine.STAFF.STATE</code>.
     */
    public final TableField<StaffRecord, Integer> STATE = createField("STATE", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>raadsmarine.STAFF.SUB_AREA</code>.
     */
    public final TableField<StaffRecord, Integer> SUB_AREA = createField("SUB_AREA", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>raadsmarine.STAFF.TEACHER_FIRST_NAME</code>.
     */
    public final TableField<StaffRecord, String> TEACHER_FIRST_NAME = createField("TEACHER_FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.TEACHER_LAST_NAME</code>.
     */
    public final TableField<StaffRecord, String> TEACHER_LAST_NAME = createField("TEACHER_LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.TEACHER_MIDDLE_NAME</code>.
     */
    public final TableField<StaffRecord, String> TEACHER_MIDDLE_NAME = createField("TEACHER_MIDDLE_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.UPDATED_BY</code>.
     */
    public final TableField<StaffRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>raadsmarine.STAFF.UPDATED_DATE</code>.
     */
    public final TableField<StaffRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>raadsmarine.STAFF.standard_STANDARD_ID</code>.
     */
    public final TableField<StaffRecord, Long> STANDARD_STANDARD_ID = createField("standard_STANDARD_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>raadsmarine.STAFF.user_UserId</code>.
     */
    public final TableField<StaffRecord, Long> USER_USERID = createField("user_UserId", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>raadsmarine.STAFF</code> table reference
     */
    public Staff() {
        this(DSL.name("STAFF"), null);
    }

    /**
     * Create an aliased <code>raadsmarine.STAFF</code> table reference
     */
    public Staff(String alias) {
        this(DSL.name(alias), STAFF);
    }

    /**
     * Create an aliased <code>raadsmarine.STAFF</code> table reference
     */
    public Staff(Name alias) {
        this(alias, STAFF);
    }

    private Staff(Name alias, Table<StaffRecord> aliased) {
        this(alias, aliased, null);
    }

    private Staff(Name alias, Table<StaffRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Raadsmarine.RAADSMARINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STAFF_FK_H5BCHGE5E9QNHXYI0U5CSSH41, Indexes.STAFF_FK_JGVGOYYD1H0UYYBELW6KMVYOT, Indexes.STAFF_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StaffRecord, Long> getIdentity() {
        return Keys.IDENTITY_STAFF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StaffRecord> getPrimaryKey() {
        return Keys.KEY_STAFF_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StaffRecord>> getKeys() {
        return Arrays.<UniqueKey<StaffRecord>>asList(Keys.KEY_STAFF_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StaffRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StaffRecord, ?>>asList(Keys.FK_H5BCHGE5E9QNHXYI0U5CSSH41, Keys.FK_JGVGOYYD1H0UYYBELW6KMVYOT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staff as(String alias) {
        return new Staff(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staff as(Name alias) {
        return new Staff(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(String name) {
        return new Staff(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staff rename(Name name) {
        return new Staff(name, null);
    }
}
